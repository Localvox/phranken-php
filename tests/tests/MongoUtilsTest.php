<?php
namespace MarketMeSuite\Phranken\Database\Mongo\Util;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-08-24 at 03:47:34.
 */
class MongoUtilsTest extends \PHPUnit_Framework_TestCase
{
    //-------- vars for StringArrayToFieldsArray --------
    protected $_expectedFieldArray = null;
    protected $_expectedFieldArrayNegative = null;
    protected $_inputFieldArray = null;

    //-------- vars for testConstructInArray --------
    protected $_inputConstructInArray = null;
    protected $_expectedConstructInArray = null;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //-------- vars for StringArrayToFieldsArray --------
        $this->_expectedFieldArray = array('prop1' => 1, 'prop2' => 1, 'prop3' => 1);
        $this->_expectedFieldArrayNegative = array('prop1' => 0, 'prop2' => 0, 'prop3' => 0);
        $this->_inputFieldArray = array('prop1', 'prop2', 'prop3');

        //-------- vars for testConstructInArray --------
        $this->_inputConstructInArray = array(1, 2, 3, 4, 5, 6);
        $this->_input2ConstructInArray = array(
            array('val' => 1),
            array('val' => 2),
            array('val' => 3),
            array('val' => 4),
            array('val' => 5),
            array('val' => 6),
        );
        $this->_expectedConstructInArray = array('$in' => array(1, 2, 3, 4, 5, 6));
        $this->_expectedConstructInArrayNegative = array('$nin' => array(1, 2, 3, 4, 5, 6));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::StringArrayToFieldsArray
     */
    public function testStringArrayToFieldsArray()
    {
        $this->assertEquals(
            MongoUtils::StringArrayToFieldsArray($this->_inputFieldArray),
            $this->_expectedFieldArray
        );

        // should create an exclusion array
        $this->assertEquals(
            MongoUtils::StringArrayToFieldsArray($this->_inputFieldArray, true),
            $this->_expectedFieldArrayNegative
        );

        $this->assertEquals(
            MongoUtils::StringArrayToFieldsArray(array()),
            array()
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::StringArrayToFieldsArray
     */
    public function testStringArrayToFieldsArray2()
    {
        $this->assertSame(
            MongoUtils::StringArrayToFieldsArray('wrong'),
            false
        );

        $this->assertSame(
            MongoUtils::StringArrayToFieldsArray(null),
            false
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::ConstructInArray
     */
    public function testConstructInArray()
    {
        $this->assertSame(
            MongoUtils::ConstructInArray($this->_inputConstructInArray),
            $this->_expectedConstructInArray
        );

        $this->assertSame(
            MongoUtils::ConstructInArray($this->_inputConstructInArray, true),
            $this->_expectedConstructInArrayNegative
        );

        $this->assertSame(
            MongoUtils::ConstructInArray($this->_input2ConstructInArray, false, 'val'),
            $this->_expectedConstructInArray
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::ConstructInArray
     */
    public function testConstructInArray2()
    {
        $this->assertSame(
            MongoUtils::ConstructInArray('wrong'),
            false
        );

        $this->assertSame(
            MongoUtils::ConstructInArray(null),
            false
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::ConstructAndArray
     */
    public function testConstructAndArray()
    {
        $this->assertSame(
            MongoUtils::ConstructAndArray(
                array('_id' => 'val'),
                array('name' => array('$in' => array('jim', 'bob')))
            ),
            array('$and'=>array(
                array('_id' => 'val'),
                array('name' => array('$in' => array('jim', 'bob')))
            ))
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::ConstructAndArray
     */
    public function testConstructAndArray2()
    {
        $this->assertSame(
            MongoUtils::ConstructAndArray(),
            array('$and'=>array())
        );

        $this->assertSame(
            MongoUtils::ConstructAndArray('blah', 1, null),
            array('$and'=>array())
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::AddAndParams
     * @todo   Implement testAddAndParams().
     */
    public function testAddAndParams()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::GetArrayFromCursor
     * @todo   Implement testGetArrayFromCursor().
     */
    public function testGetArrayFromCursor()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers MarketMeSuite\Phranken\Database\Mongo\Util\MongoUtils::ArrayMembersToInt
     * @todo   Implement testArrayMembersToInt().
     */
    public function testArrayMembersToInt()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
